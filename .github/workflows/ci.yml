name: CI

# https://github.com/eriktisme/recipe-app-api-devops/blob/master/.github/workflows/continuous-deployment.yml
# https://gitlab.com/LondonAppDev/recipe-app-api-devops/-/blob/master/.gitlab-ci.yml
on:
  # deploy
  push:
    branches: [master, production]

  # lint and test
  # note: it will be triggered when you
  #       - created a PR
  #       - push a commit to PR
  #       - even when this file isn't available in master branch yet.
  pull_request:
    branches: [master, production]

jobs:
  testAndLint:
    runs-on: ubuntu-latest

    # run the following steps as long as there is a PR or a COMMIT to master/production
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      # checks on codebase
      - name: Test and Lint
        run: docker-compose run --rm app sh -c "python manage.py wait_for_db && python manage.py test && flake8"

      - name: Install Terraform on the machine
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.12.26

      # after checking out(cloned) our entire codebase to ubuntu-latest machine,
      # on top of that, also install terraform to the machine.
      # then, you may run terraform as though it's available at your machine
      - name: Validate Terraform
        # switch to deploy dir
        # -backend=false. do not need to initialize full backend, just initialize the basic provider for validation
        # if validation fails, it will not proceed to next step.
        # fmt -check. do not need to apply the corrected format to files, just make it fail if
        # its not in the correct format.
        run: |
          cd deploy/
          terraform init -backend=false  
          terraform validate 
          terraform fmt -check

  buildAndPush:
    runs-on: ubuntu-latest

    # because jobs are run in parallel..
    # use 'needs' to specify the sequence to run
    needs: [testAndLint]

    # only runs on push/commit to master/production
    if: ${{ github.event_name == 'push' }}

    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      # basically it install python3 and aws-cli to your machine.
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # to obtain git sha
      - name: Declare variables
        id: vars
        shell: bash
        run: |
          echo "::set-output name=sha_short::$(git rev-parse --short=8 ${{ github.sha }})"

      - name: Build and Push

        # tag your local repo with sha commit. Why? We want to make sure each docker image
        # you pushed is unique.
        #
        # there are 2 docker pushes here: one current (sha), one 'latest'
        run: |
          docker build --compress -t ${{ secrets.ECR_REPO }}:${{ steps.vars.outputs.sha_short }} .
          docker push ${{ secrets.ECR_REPO }}:${{ steps.vars.outputs.sha_short }}
          docker tag ${{ secrets.ECR_REPO }}:${{ steps.vars.outputs.sha_short }} ${{ secrets.ECR_REPO }}:latest
          docker push ${{ secrets.ECR_REPO }}:latest

  # This job has a dependency on "buildAndPush" job.  why? it needs image to be available on ECR.
  stagingPlan:
    runs-on: ubuntu-latest
    needs: [buildAndPush]
    if: ${{ github.event_name == 'push' }}

    steps:
      - uses: actions/checkout@v2

      # ci-user credentials that is needed to run terraform to target
      # the aws cloud
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      - name: Declare variables
        id: vars
        shell: bash
        run: |
          echo "::set-output name=sha_short::$(git rev-parse --short=8 ${{ github.sha }})"

      # TF_VAR is the syntax used to pass environment variables in to Terraform,
      # esp if you wanna change values in `variable.tf` at runtime.
      # need ecr_image_api to run ecr in ecs
      #
      # terraform init: pull downs providers that are needed, i.e: aws.
      # Also, initialize the backend - connect to S3, download tf state and store it locally
      # in machine of this job.
      #
      # terraform workspace: selects correct workspace to deploy to. i.e: dev, staging, production
      #
      # terraform plan: output to console logs all the changes that will be made to AWS. (more of informational purposes since its automatic)
      - name: Staging Plan
        run: |
          cd deploy/
          export TF_VAR_ecr_image_api=${{ secrets.ECR_REPO }}:${{ steps.vars.outputs.sha_short }}
          terraform init 
          terraform workspace select staging || terraform workspace new staging 
          terraform plan

  # this job will also be executed whenever there is a commit to
  # 'production' branch. This is because hot-fixes on Production
  # should also be deployed to 'master' branch.
  #
  # separate from stagingPlan, just so maybe you want to have a manual apply.
  stagingApply:
    runs-on: ubuntu-latest
    needs: [stagingPlan]
    if: ${{ github.event_name == 'push' }}
    env:
      TF_VAR_db_username: ${{ secrets.TF_VAR_db_username }}
      TF_VAR_db_password: ${{ secrets.TF_VAR_db_password }}

    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      - name: Declare variables
        id: vars
        shell: bash
        run: |
          echo "::set-output name=sha_short::$(git rev-parse --short=8 ${{ github.sha }})"

      - name: Staging Apply
        run: |
          cd deploy/
          export TF_VAR_ecr_image_api=${{ secrets.ECR_REPO }}:${{ steps.vars.outputs.sha_short }}
          terraform init
          terraform workspace select staging
          terraform apply -auto-approve

  # this job should only be triggered for 'production' branch.
  productionPlan:
    runs-on: ubuntu-latest
    needs: [buildAndPush]
    if: ${{ github.ref == 'refs/heads/production' }}

    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      - name: Declare variables
        id: vars
        shell: bash
        run: |
          echo "::set-output name=sha_short::$(git rev-parse --short=8 ${{ github.sha }})"

      - name: Production Plan
        run: |
          cd deploy/
          export TF_VAR_ecr_image_api=${{ secrets.ECR_REPO }}:${{ steps.vars.outputs.sha_short }}
          terraform init 
          terraform workspace select production || terraform workspace new production 
          terraform plan

  productionApply:
    runs-on: ubuntu-latest
    needs: [productionPlan]
    if: ${{ github.ref == 'refs/heads/production' }}

    steps:
      - uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      - name: Declare variables
        id: vars
        shell: bash
        run: |
          echo "::set-output name=sha_short::$(git rev-parse --short=8 ${{ github.sha }})"

      - name: Production Apply
        run: |
          cd deploy/
          export TF_VAR_ecr_image_api=${{ secrets.ECR_REPO }}:${{ steps.vars.outputs.sha_short }}
          terraform init
          terraform workspace select production
          terraform apply -auto-approve
